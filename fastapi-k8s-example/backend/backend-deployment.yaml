apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api  # The name for this deployment
spec:  # 'spec' defines how Kubernetes is supposed to find pods to apply this deployment to
  replicas: 2  # how many pods to start up
  selector:
    matchLabels:
      app: backend-api  # this deployment will apply to pods with an 'app' label of 'backend-api'
  strategy:  # describes how Kubernetes should go about replacing existing pods with newer ones
    type: RollingUpdate  
    rollingUpdate:  # update pods in a rolling fashion
      maxUnavailable: 1  # at MOST, only 1 pod should be unavailable at a time during the rolling update
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: aguest/kubernetes-example-backend:1.2  # the container image to use for this deployment. You can specify multiple images if you want to run multiple containers in the same pod
        imagePullPolicy: Always  # always pull the image
        livenessProbe:  # describes how Kubernetes should periodically verify that the pod is still running
          httpGet:  # send a GET request to the /healthcheck route
                    # this route MUST exist and return a value equal to or greater than 200 but less than 400 to be 'successful'
            path: /healthcheck
            port: 8000
          initialDelaySeconds: 10  # Kubernetes should wait 3 seconds before performing the first check
          periodSeconds: 20  # Kubernetes should perform this healthcheck every 5 seconds
          timeoutSeconds: 3  # Number of seconds after which the probe request will be considered a failure
        readinessProbe:  # describes how Kubernetes should verify that the pods is available to accept connections
          httpGet:
            path: /healthcheck
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 3
        resources:
          requests:  # 'requests' is the minimum resources the pod will be give. Essentially, the 'guaranteed' resources.
            memory: "50Mi"  # 50 Mebibytes or 52.429 Megabytes
            cpu: "50m"  # 1/20 of a single core (1,000m = 1 CPU core)
          limits:  # 'limits' is the maximum resources the pod can be given.
            memory: "100Mi"  # 100 Mebibytes or 104.858 Megabytes
            cpu: "100m"  # 1/10 of a single core (1,000m = 1 CPU core)
        securityContext:
          runAsNonRoot: true  # run as non-root user
          allowPrivilegeEscalation: false  # don't allow privilege escalation
        ports:
        - containerPort: 8000  # the port or ports to expose on the pod
      restartPolicy: Always  # always restart the pod if it's stopped
